suite: test deployment
values:
  - ./values/common-test-values.yaml
templates:
  - deployment.yaml
tests:
  - it: must have labels
    set:
      env: dev
      labels:
        custom: label
    asserts:
      - isNotEmpty:
          path: metadata.labels
      - equal:
          path: metadata.labels.environment
          value: dev
      - equal:
          path: metadata.labels.custom
          value: label
      - isNotEmpty:
          path: spec.template.metadata.labels.common
      - equal:
          path: metadata.labels["app.kubernetes.io/managed-by"]
          value: Helm
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: rudder-test
  - it: must have annotations
    set:
      env: prd
    asserts:
      - equal:
          path: metadata.annotations["meta.helm.sh/release-name"]
          value: rudder-test
      - equal:
          path: metadata.annotations["meta.helm.sh/release-namespace"]
          value: NAMESPACE
  - it: CPU limit can be set
    release: {}
    set:
      containers:
        - cpuLimit: 1
          image: img
          probes:
            enabled: false
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: "1"
  # #TODO mem req/limit should be equal
  - it: memory limit is 120 percent of request
    set:
      containers:
        - name: test
          image: img
          memory: 256
          probes:
            enabled: false
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 307Mi
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 256Mi
  - it: memory limit can be overridden
    set:
      containers:
        - name: test
          image: img
          memory: 256
          memoryLimit: 1024
          probes:
            enabled: false
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 1024Mi
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 256Mi
  - it: ephemeral-storage can be set
    set:
      containers:
        - name: test
          image: img
          ephemeralStorage: 2Gi
          ephemeralStorageLimit: 4Gi
          probes:
            enabled: false
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.ephemeral-storage
          value: 4Gi
      - equal:
          path: spec.template.spec.containers[0].resources.requests.ephemeral-storage
          value: 2Gi
  - it: must enable prometheus with defaults if enabled
    set:
      deployment:
        prometheus:
          enabled: true
    asserts:
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/scrape"]
          value: "true"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/path"]
          value: "/actuator/prometheus"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/port"]
          value: "8080"
  - it: must use 3 replicas if replicas is 3
    set:
      env: dev
      deployment:
        replicas: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
  - it: must not use replicas if HPA enabled
    set:
      env: prd
      deployment:
        replicas: 3
        maxReplicas: 8
    asserts:
      - isNull:
          path: spec.replicas
  - it: must use 1 replica if forceReplicas is 1 and recreate
    set:
      env: prd
      deployment:
        forceReplicas: 1
    asserts:
      - equal:
          path: spec.replicas
          value: 1
      - equal:
          path: spec.strategy.type
          value: Recreate
  - it: must use 3 replica if forceReplicas is 3
    set:
      env: prd
      deployment:
        forceReplicas: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
  - it: must adopt for gRPC
    set:
      containers:
        - name: test
          image: img
          grpc: true
          probes:
            liveness:
              path: "/actuator/health/liveness"
            readiness:
              path: "/actuator/health/readiness"
            startup:
              failureThreshold: 300
              periodSeconds: 1
    asserts:
      - isNotEmpty:
          path: spec.template.spec.containers[0].livenessProbe.exec.command
  - it: must adopt for new gRPC probes 1.24
    set:
      containers:
        - name: test
          image: img
          grpc: true
          probes:
            liveness:
              grpc:
                port: 8154
            readiness:
              grpc:
                port: 8154
            startup:
              grpc:
                port: 8154
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.grpc.port
          value: 8154
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.grpc.port
          value: 8154
      - equal:
          path: spec.template.spec.containers[0].startupProbe.grpc.port
          value: 8154
  - it: must be able to override initialDelay and successThreshold for probes
    set:
      containers:
        - name: test
          image: img
          probes:
            liveness:
              path: "/actuator/health/liveness"
              initialDelaySeconds: 1
              successThreshold: 11
            readiness:
              path: "/actuator/health/readiness"
              initialDelaySeconds: 2
              successThreshold: 12
            startup:
              failureThreshold: 300
              periodSeconds: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 1
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 2
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.successThreshold
          value: 11
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.successThreshold
          value: 12
  - it: terminationGracePeriodSeconds use correct value
    set:
      deployment:
        terminationGracePeriodSeconds: 60
    asserts:
      - equal:
          path: spec.template.spec.terminationGracePeriodSeconds
          value: 60
  - it: spec does not contain terminationGracePeriodSeconds if missing from values
    asserts:
      - isNull:
          path: spec.template.spec.terminationGracePeriodSeconds
  - it: override credentialsSecret
    set:
      postgres:
        enabled: true
        credentialsSecret: my-secret
    asserts:
      - equal:
          path: spec.template.spec.containers[1].envFrom[0].secretRef.name
          value: my-secret
  - it: override connectionConfig
    set:
      postgres:
        enabled: true
        connectionConfig: my-config
    asserts:
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.name
          value: my-config
  - it: command use correct value
    set:
      containers:
        - name: test
          image: img
          command: ["/bin/sh"]
          probes:
            enabled: false
    asserts:
      - equal:
          path: spec.template.spec.containers[0].command
          value: ["/bin/sh"]
  - it: spec does not contain command if missing from values
    asserts:
      - isNull:
          path: spec.template.spec.containers[0].command
  - it: args use correct value
    set:
      containers:
        - name: test
          image: img
          args: ["-c", "gcloud sql export"]
          probes:
            enabled: false
    asserts:
      - equal:
          path: spec.template.spec.containers[0].args
          value: ["-c", "gcloud sql export"]
  - it: spec does not contain args if missing from values
    asserts:
      - isNull:
          path: spec.template.spec.containers[0].args
  - it: set lifecycle hooks
    set:
      containers:
        - name: test
          image: img
          args: ["-c", "gcloud sql export"]
          probes:
            enabled: false
          lifecycle:
            preStop:
              exec:
                command:
                  - echo
    asserts:
      - equal:
          path: spec.template.spec.containers[0].lifecycle.preStop.exec.command[0]
          value: echo
  - it: serviceAccountName use correct default value
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: application
  - it: serviceAccountName use correct value when overridden
    set:
      deployment:
        serviceAccountName: myaccount
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: myaccount
  - it: can override release name
    set:
      releaseName: override
    asserts:
      - equal:
          path: metadata.name
          value: override
  - it: can disable probes
    set:
      containers:
        - name: test
          image: img
          probes:
            enabled: false
    asserts:
      - isNull:
          path: spec.template.spec.containers[0].livenessProbe
  - it: can override probes
    set:
      containers:
        - name: test
          image: img
          probes:
            spec:
              livenessProbe:
                tcpSocket:
                  port: admin
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.tcpSocket.port
          value: admin
  - it: has good security context
    asserts:
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 1000
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false
  - it: has envFrom secrets in all containers
    set:
      containers:
        - name: test
          image: img
          probes:
            enabled: false
        - name: test2
          image: img
          probes:
            enabled: false
      releaseName: override
      secrets:
        one-secret:
          - SINGLE_SECRET
        two-secrets:
          - FIRST_SECRET
          - SECOND_SECRET
    asserts:
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].secretRef.name
          value: override-one-secret
      - equal:
          path: spec.template.spec.containers[0].envFrom[1].secretRef.name
          value: override-two-secrets
      - equal:
          path: spec.template.spec.containers[1].envFrom[0].secretRef.name
          value: override-one-secret
      - equal:
          path: spec.template.spec.containers[1].envFrom[1].secretRef.name
          value: override-two-secrets
  - it: has no envFrom with no secrets
    asserts:
      - isNull:
          path: spec.template.spec.containers[0].envFrom
  - it: Spec secret RUDDER_SECRET must be set
    values:
      - ./values/secret-values.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].secretRef.name
          value: "rudder-test-one-secret"
  - it: spec does not contain terminationGracePeriodSeconds if missing from values
    set:
      container:
        image: img
    asserts:
      - isNull:
          path: spec.template.spec.terminationGracePeriodSeconds
  - it: must adopt for gRPC
    set:
      grpc: true
      container:
        image: img
    asserts:
      - isNotEmpty:
          path: spec.template.spec.containers[0].livenessProbe.exec.command
  - it: terminationGracePeriodSeconds use correct value
    set:
      container:
        image: img
        terminationGracePeriodSeconds: 60
    asserts:
      - equal:
          path: spec.template.spec.terminationGracePeriodSeconds
          value: 60
  - it: postgres cpu limit can be cleared
    release: {}
    set:
      postgres:
        enabled: true
        cpu: 0.1
    asserts:
      - isNull:
          path: spec.template.spec.containers[1].resources.limits.cpu
  - it: must use 3 replicas if replicas is 3
    set:
      env: dev
      container:
        image: testimg
        replicas: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
  - it: must use 1 replica if forceReplicas is 1 and recreate
    set:
      env: prd
      container:
        image: some
        forceReplicas: 1
    asserts:
      - equal:
          path: spec.replicas
          value: 1
      - equal:
          path: spec.strategy.type
          value: Recreate
  - it: must use 3 replica if forceReplicas is 3
    set:
      env: prd
      container:
        image: some
        forceReplicas: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
  - it: must enable prometheus if enabled
    set:
      container:
        image: img
        prometheus:
          enabled: true
    asserts:
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/scrape"]
          value: "true"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/path"]
          value: "/actuator/prometheus"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/port"]
          value: "8080"
  - it: must disable prometheus if disabled
    set:
      container:
        prometheus:
          enabled: false
    asserts:
      - isNull:
          path: spec.template.metadata.annotations["prometheus.io/scrape"]
  - it: must mount envFrom if postgres enabled
    set:
      postgres:
        enabled: true
    asserts:
      - equal:
          path: spec.template.spec.containers[1].envFrom[0].secretRef.name
          value: rudder-test-psql-credentials
  - it: must enable sidecar if postgres enabled
    set:
      postgres:
        enabled: true
    asserts:
      - isNotEmpty:
          path: spec.template.spec.containers[1]
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.name
          value: rudder-test-psql-connection
  - it: must enable only one sidecar if postgres enabled for multiple containers
    set:
      container: {}
      containers:
        - cpuLimit: 1
          image: img
          probes:
            enabled: false
        - cpuLimit: 2
          image: img2
          probes:
            enabled: false
      postgres:
        enabled: true
    asserts:
      - isNotEmpty:
          path: spec.template.spec.containers[2]
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.name
          value: rudder-test-psql-connection
      - isNull:
          path: spec.template.spec.containers[3]
  - it: postgres cpu limit can be overridden
    release: {}
    set:
      postgres:
        enabled: true
        cpu: 0.1
        cpuLimit: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: "1"
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: "0.1"
  - it: has common runtime env set from env label
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[0].value
          value: dev
  - it: must add to env if listed
    set:
      container:
        image: img
        env:
          - name: FOO
            value: bar
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[1].value
          value: bar
  - it: must mount envFrom if configmap is enabled
    release:
      name: testsuite
    set:
      releaseName: testsuite
      configmap:
        enabled: true
    asserts:
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.name
          value: testsuite
  - it: must default minReadySeconds to 0
    asserts:
      - equal:
          path: spec.minReadySeconds
          value: 0
  - it: can override minReadySeconds
    set:
      deployment:
        minReadySeconds: 10
    asserts:
      - equal:
          path: spec.minReadySeconds
          value: 10
  - it: can set initContainers
    set:
      initContainers:
        - name: "init-a"
          image: busybox:latest
          command: ['sh', '-c', "echo a"]
        - name: "init-b"
          image: busybox:latest
          command: ['sh', '-c', "echo b"]
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: init-a
      - equal:
          path: spec.template.spec.initContainers[1].name
          value: init-b
